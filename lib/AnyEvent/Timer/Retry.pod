=head1 NAME

AnyEvent::Timer::Retry - Retrying until some condition is satisfied

=head1 SYNOPSIS

  use AnyEvent::Timer::Retry;
  my $timer; $timer = AnyEvent::Timer::Retry->new
      (on_retry => sub {
         warn sprintf "%dth retry..." $timer->retry_count;
         $_[0]->($ok, $appdata);
       },
       on_end => sub {
         my ($self, $ok, $appdata) = @_;
         if ($ok) {
           warn sprintf "Succeeded after %d tries", $self->retry_count;
         } else {
           warn sprintf "Failed after %d tries", $self->retry_count;
         }
         undef $timer;
       });

=head1 DESCRIPTION

The C<AnyEvent::Timer::Retry> module repeatedly run a code until some
condition is satisfied.

=head1 METHODS

The module runs the specified code by instantiating it with the C<new>
method.  The code specified by the C<on_retry> option to the method is
repeatedly invoked until the object is notified as succeeded, or the
execution is cancelled.  Finally the code specified by the C<on_end>
option is invoked.

=over 4

=item $timer = AnyEvent::Timer::Retry->new (NAME => VALUE, ...)

Run a code with specified arguments.  Arguments must be specified as
name/value pairs, which include:

=over 4

=item on_retry => CODE

The code reference that is invoked for each try.

The code is invoked with the code reference I<$done> as the argument.
The code is expected to invoke I<$done> directly or indirectly,
synchronously or asynchronouslym with the following arguments: The
first argument must be the boolean value representing whether the
retry has succeeded or not.  The second argment optionally accept any
value, which can be used to pass application-dependent data from the
C<on_retry> code to the C<on_end> code.  The I<$done> is expected to
be invoked exactly once.  Second or later invocations are silently
ignored.

The code is expected not to throw any exception.  The I<$done> code
will not throw any exception.

Note that this code is also invoked for the first try.  It is counted
as the "zeroth" retry.

This option must be specified.

=item on_end => CODE

The code reference that is invoked after the result of the last retry
is determined.

The code is invoked with two arguments: The result of the last retry
in boolean; The optional application data set by the C<$done> argument
invoked by the C<on_retry> code.  The code is expected not to throw
any exception.

This option must be specified.

=item on_info => CODE

The code reference that is invoked when advisory or debug information
is available.  It is invoked when retry is scheduled, for example.

If specified, the code reference is invoked with key/value pairs as
arguments.  At the time of writing, the only available key is
C<message>, which is always included in the argument.  The value
contains the human readable short description of the situation.  The
code reference is expected not to throw any exception.

Unless the code reference is explicitly specified, the C<message>
value is printed to the standard error output.

=item interval => NUMBER

The initial value for the interval between retries, in seconds.

=item interval_backoff => STRING

Specify the backoff algorithm used to determine the sequence of
intervals for retries.  See later section for more information.

=item timeout => NUMBER

The global timeout, in seconds.  After this period has elapsed since
the C<new> method is invoked, the ongoing retrying is marked as failed
and the entire retrying process is cancelled.  Defaulted to 60.

Timeout is not set if the value is a negative number.

=item retry_timeout => NUMBER

The initial value for the timeout of a retry, in seconds.  Once this
period has elapsed after the retrying is started, it waits for the
next retrying with the appropriate interval.  Please note that the
retrying operation itself cannot be stopped, but its result is simply
discarded.  Defaulted to 60.

Timeout is not set if the value is a negative number.

=item retry_timeout_backoff => STRING

Specify the algorithm to determine the sequence of timeout values for
retries.  See later section for more information.

=item max_retry_count => NUMBER

The maximum number of retries.  By default, no maximum value is set.

=back

In additon, parameters to backoff algorithms can be specified as well,
as described in later section.

=item $count = $timer->retry_count

The current number of the retries.  For the first run of the
C<on_retry> code, it returns zero (0).  For the first I<retry>, it
returns one (1).

After the last retry, this method returns the number of the retries
run with the object.

=item $interval = $timer->interval

Return the I<initial> value for the interval between retries, in
seconds.

=item $interval = $timer->current_interval

Return the interval before the current (or last) retry, in seconds.
For the first try, it returns zero.

=item $timeout = $timer->retry_timeout

Return the I<initial> value for the retry timeout, in seconds.

=item $timeout = $timer->current_retry_timeout

Return the retry timeout value for the current (or last) retry, in
seconds.

=item undef $timer

=item $timer->cancel

Cancel the retrying, as soon as possible.  Once the C<cancel> method
is invoked, or all references to the object is discarded, no more
retry will be initiated later.  Please note that the currently running
retry cannot be stoped, although it is marked as failure.

After cancelled, the C<on_done> code is invoked with the result
argument set to false, with no application data.

=back

=head1 BACKOFF ALGORITHMS

The intervals between retries are determined by the algorithm
specified to the C<interval_backoff> option.  Likewise, the way to
determine the timeout values of retries are specified by the
C<retry_timeout_backoff> option.  They are defaulted to C<exponential>
and C<constant>, respectively.

Following builtin backoff algorithm are defined:

=over 4

=item C<constant>

The value is never changed from their initial values.

=item C<exponential>

The exponential backoff, i.e. the value is increased by multiplying
previous value.  If the option C<interval_backoff_multiplier> or
C<retry_timeout_backoff_multiplier> is specified, it is used as the
multiplier for the values.  Defaulted to C<1.5>.  If the option
C<interval_backoff_max> or C<retry_timeout_backoff_max> is specified,
and if the calculated value is greater than that value, it is used as
the value instead.

=item C<random>

The value is randomly selected between minimum and maximum values.
The initial value is ignored.  The minimum value is taken from the
option C<interval_backoff_min> or C<retry_timeout_backoff_min>.
Likewise, the maximum value is taken from the option
C<interval_backoff_max> or C<retry_timeout_backoff_max>.  Their
defaults are C<1> and C<10>, respectively.

=back

In addition, you can define other backoff algorithm by adding
key-value pair to hash reference
C<$AnyEvent::Timer::Retry::BackoffAlgorithms>, where key is the short
name of the backoff algorithm and the value is the implementation of
the algorithm given as a code reference.  The code reference is
invoked with two values: The first, I<$type>, represents the type of
the value, C<interval> or C<retry_timeout>.  The second, I<$timer>, is
the C<AnyEvent::Timer::Retry> object.  It can access to the initial
value by C<< $timer->$type >>, the current value by C<<
$timer->{"current_$type"} >> (which could be C<undef> for the first
try), the current retry count by C<< $timer->retry_count >>, an
algorithm-specific option by C<< $timer->{$type . '_backoff_' . $name}
>> where I<$name> is the algorithm-specific option name.  Any other
member of C<< $timer >> should not be accessed.  The code reference is
expected not to throw any exception.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2012 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
