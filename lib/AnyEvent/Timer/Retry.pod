=head1 NAME

AnyEvent::Timer::Retry - Retrying until some condition is satisfied

=head1 SYNOPSIS

  use AnyEvent::Timer::Retry;
  my $timer; $timer = AnyEvent::Timer::Retry->new
      (on_retry => sub {
         warn sprintf "%dth retry..." $timer->retry_count;
         $_[0]->($ok, $appdata);
       },
       on_end => sub {
         my ($self, $ok, $appdata) = @_;
         if ($ok) {
           warn sprintf "Succeeded after %d tries", $self->retry_count;
         } else {
           warn sprintf "Failed after %d tries", $self->retry_count;
         }
         undef $timer;
       });

=head1 DESCRIPTION

The C<AnyEvent::Timer::Retry> module repeatedly run a code until some
condition is satisfied.

=head1 METHODS

The module runs the specified code by instantiating it with the C<new>
method.  The code specified by the C<on_retry> option to the method is
repeatedly invoked until the object is notified as succeeded, or the
execution is cancelled.  Finally the code specified by the C<on_end>
option is invoked.

=over 4

=item $timer = AnyEvent::Timer::Retry->new (NAME => VALUE, ...)

Run a code with specified arguments.  Arguments must be specified as
name/value pairs, which include:

=over 4

=item on_retry => CODE

The code reference that is invoked for each try.

The code is invoked with the code reference I<$done> as the argument.
The code is expected to invoke I<$done> directly or indirectly,
synchronously or asynchronouslym with the following arguments: The
first argument must be the boolean value representing whether the
retry has succeeded or not.  The second argment optionally accept any
value, which can be used to pass application-dependent data from the
C<on_retry> code to the C<on_end> code.  The I<$done> is expected to
be invoked exactly once.  Second or later invocations are silently
ignored.

The code is expected not to throw any exception.  The I<$done> code
will not throw any exception.

Note that this code is also invoked for the first try.  It is counted
as the "zeroth" retry.

This option must be specified.

=item on_end => CODE

The code reference that is invoked after the result of the last retry
is determined.

The code is invoked with two arguments: The result of the last retry
in boolean; The optional application data set by the C<$done> argument
invoked by the C<on_retry> code.  The code is expected not to throw
any exception.

=item interval => NUMBER

The initial value for the interval between retries, in seconds.

=item timeout => NUMBER

The global timeout, in seconds.  After this period has elapsed since
the C<new> method is invoked, the ongoing retrying is marked as failed
and the entire retrying process is cancelled.  Defaulted to 60.

Timeout is not set if zero or C<undef> is specified.

=item retry_timeout => NUMBER

The initial value for the timeout of a retrying, in seconds.  Once
this period has elapsed after the retrying is started, it waits for
the next retrying with the appropriate interval.  Please note that the
retrying operation itself cannot be stopped, but its result is simply
discarded.  Defaulted to 60.

Timeout is not set if zero or C<undef> is specified.

=back

=item $count = $timer->retry_count

The current number of the retries.  For the first run of the
C<on_retry> code, it returns zero (0).  For the first I<retry>, it
returns one (1).

After the last retry, this method returns the number of the retries
run with the object.

=item undef $timer

=item $timer->cancel

Cancel the retrying, as soon as possible.  Once the C<cancel> method
is invoked, or all references to the object is discarded, no more
retry will be initiated later.  Please note that the currently running
retry cannot be stoped, although it is marked as failure.

After cancelled, the C<on_done> code is invoked with the result
argument set to false, with no application data.

=back

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2012 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
